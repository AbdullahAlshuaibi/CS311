// CS311 Yoshii - HW5 Priority Queue Implementation File
// Complete all ** parts and give good comments

// =================================================
// HW5 Priority Printer Queue 
// YOUR NAME: **
// File Type: implementation pqueue.cpp
// =================================================

#include "pqueue.h"

// constructor
pqueue::pqueue()
{  count = 0;  // no jobs yet
}

// destructor does nothing
pqueue::~pqueue() {}

// Purpose: to add a job to a right place in the Pqueue
// Argument: j is the job priority number
void pqueue::insertjob(int j)
{
  cout<<"Adding: "<<j<<endl;// ** add the job j at the rear
  Q[count] = j;
  count++;
  trickleup(); // moves the job to the right place
}

// Purpose: to print a job and reheapify the Pqueue
void pqueue::printjob()
{
  cout << "printing: " << Q[0] <<endl;
  reheapify(); 
}

// Purpose: to display all jobs
void pqueue::displayAll()
{ cout << "Jobs: " ;
  for(int i =0; i < count; i++) // ** loop to display jobs from slot 0 to slot count-1 horizontally
    {
      cout<<Q[i]<<" ";
    }
  cout<<endl;
} 

// Utility functions follow: ------------------


// Purpose: to make the very last job trickle up to the right location 
void pqueue::trickleup()
{ 
  int x = count-1;  // the very last job location
  // ** while x is > 0
  // compare Q[x] with the parent and if the parent is bigger swap & update x. Otherwise stop.
  //  You can call getParent to get the location of the parent
 
  while(x > 0)
    {
      int P = getParent(x);
      if(Q[x] < Q[P])
	{
	  int temp = Q[P];
	  Q[P] = Q[x];
	  Q[x] = temp;
	  x = P;
	}
      else
	return;
    }
}

// Purpose: find the location of the parent 
// The child location is given.  Need to call even.
int pqueue::getParent(int child)
{  // ** return the parent location 
  int Parent;
  if(even(child)) // if it's the right child 
    {
      Parent = (child - 2) / 2;
      return Parent; 
    }
  else //if it's the left child
    {
      Parent = (child - 1) / 2;
      return Parent;
    }
}

// Purpose: is location i even? Important in finding its parent location
bool pqueue::even(int i)
{
  if ((i % 2) ==  0) return true; else return false; }


// Purpose: to reheapify the Pqueue after printing
void pqueue::reheapify()
{ 
  Q[0] = Q[count-1];  // move the last job to the front
  count--;
  // ** start at the root and repeat the following:
  // find the location of the smaller child if you have not fallen off the tree yet
  //  if the smaller child is smaller than the parent, swap
  //  else stop
  int i =0;
  while(i*2+1 < count)  // checking if Q[i] has children 
    { 
      if(Q[getSmallerchild(i)]< Q[i]) //if so swip it with the smaller child when the child is smaller than the parent
	{
	  int smallChild = getSmallerchild(i);
	  int temp = Q[i];
	  Q[i] = Q[smallChild];
	  Q[smallChild] = temp;
	  
	  i = smallChild;
	}
      else // if parent smaller than it's children, stop. 
	return;
    }
}

// Purpose: to find the location of the smaller child
// where children at locations 2*i+1 and 2*i+2
int pqueue::getSmallerchild(int i)
{
// ** return the location of the smaller child 
  if(Q[2*i+1] < Q[2*i+2]) // if left child smaller than the right child 
    return 2*i+1; //return the smaller child
  else  //if right child is smaller than the left child 
    return 2*i+2;  //return the right chid 
}


